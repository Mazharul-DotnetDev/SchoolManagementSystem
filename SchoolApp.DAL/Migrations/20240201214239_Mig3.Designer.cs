// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolApp.DAL.SchoolContext;

#nullable disable

namespace SchoolApp.DAL.Migrations
{
    [DbContext(typeof(SchoolDbContext))]
    [Migration("20240201214239_Mig3")]
    partial class Mig3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AttendanceStudent", b =>
                {
                    b.Property<int>("refAttendancesAttendanceId")
                        .HasColumnType("int");

                    b.Property<int>("refStudentsStudentId")
                        .HasColumnType("int");

                    b.HasKey("refAttendancesAttendanceId", "refStudentsStudentId");

                    b.HasIndex("refStudentsStudentId");

                    b.ToTable("AttendanceStudent");
                });

            modelBuilder.Entity("ClassesSubject", b =>
                {
                    b.Property<int>("refClassesClassId")
                        .HasColumnType("int");

                    b.Property<int>("refSubjectsSubjectId")
                        .HasColumnType("int");

                    b.HasKey("refClassesClassId", "refSubjectsSubjectId");

                    b.HasIndex("refSubjectsSubjectId");

                    b.ToTable("ClassesSubject");
                });

            modelBuilder.Entity("ExamSubject", b =>
                {
                    b.Property<int>("refExamsExamID")
                        .HasColumnType("int");

                    b.Property<int>("refSubjectsSubjectId")
                        .HasColumnType("int");

                    b.HasKey("refExamsExamID", "refSubjectsSubjectId");

                    b.HasIndex("refSubjectsSubjectId");

                    b.ToTable("ExamSubject");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.AcademicMonth", b =>
                {
                    b.Property<int>("AcademicMonthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcademicMonthId"));

                    b.Property<string>("AcademicMonthName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AcademicYearId")
                        .HasColumnType("int");

                    b.HasKey("AcademicMonthId");

                    b.HasIndex("AcademicYearId");

                    b.ToTable("AcademicMonths");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.AcademicYear", b =>
                {
                    b.Property<int>("AcademicYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcademicYearId"));

                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime2");

                    b.HasKey("AcademicYearId");

                    b.ToTable("AcademicYears");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.Admission", b =>
                {
                    b.Property<int>("AdmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdmissionId"));

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AdmissionStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AdmissionStatusDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AdmissionUpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AdmissionUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EnrollmentId")
                        .HasColumnType("int");

                    b.Property<string>("Section")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("refAcademicYearAcademicYearId")
                        .HasColumnType("int");

                    b.HasKey("AdmissionId");

                    b.HasIndex("EnrollmentId")
                        .IsUnique();

                    b.HasIndex("StudentId");

                    b.HasIndex("refAcademicYearAcademicYearId");

                    b.ToTable("Admissions");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.Attendance", b =>
                {
                    b.Property<int>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttendanceId"));

                    b.Property<bool>("IsPresent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("attendanceDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("attendanceTime")
                        .HasColumnType("datetime2");

                    b.HasKey("AttendanceId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.Classes", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassId"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassStutus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ClassStutusDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Division")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExamID")
                        .HasColumnType("int");

                    b.Property<int?>("SessionID")
                        .HasColumnType("int");

                    b.HasKey("ClassId");

                    b.HasIndex("ExamID");

                    b.HasIndex("SessionID");

                    b.ToTable("classes");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<int?>("AttendanceId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EmployeeDOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeDesignation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeGender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeNumber")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("refEmployeeTypeEmployeeTypeId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.HasIndex("AttendanceId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("refEmployeeTypeEmployeeTypeId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.EmployeeType", b =>
                {
                    b.Property<int>("EmployeeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeTypeId"));

                    b.Property<string>("EmployeeTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeTypeId");

                    b.ToTable("EmployeeTypes");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnrollmentId"));

                    b.Property<int>("AdmissionId")
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.Exam", b =>
                {
                    b.Property<int>("ExamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamID"));

                    b.Property<string>("ExamStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExamStatusDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PassingMarks")
                        .HasColumnType("int");

                    b.HasKey("ExamID");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.ExamSchedule", b =>
                {
                    b.Property<int>("ExamScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamScheduleId"));

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExamScheduleEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExamScheduleStartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExamScheduleStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExamScheduleStatusDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ObtainedMarks")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TotalMarks")
                        .HasColumnType("int");

                    b.Property<int>("refExamExamID")
                        .HasColumnType("int");

                    b.HasKey("ExamScheduleId");

                    b.HasIndex("StudentId");

                    b.HasIndex("refExamExamID");

                    b.ToTable("ExamSchedules");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.FeePayment", b =>
                {
                    b.Property<int>("FeePaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeePaymentId"));

                    b.Property<int?>("AcademicMonthId")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountAmt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Fine")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GrandTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ModeOfPayment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PaymentDue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PaymentModeDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PreviousDue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("refStudentStudentId")
                        .HasColumnType("int");

                    b.HasKey("FeePaymentId");

                    b.HasIndex("AcademicMonthId");

                    b.HasIndex("refStudentStudentId");

                    b.ToTable("FeePayments");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.FeeStructure", b =>
                {
                    b.Property<int>("FeeStructureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeeStructureId"));

                    b.Property<decimal>("AmountOfFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("FeePaymentId")
                        .HasColumnType("int");

                    b.Property<string>("FeeStructureName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("refClassesClassId")
                        .HasColumnType("int");

                    b.Property<int>("refFeeTypeFeetypeId")
                        .HasColumnType("int");

                    b.HasKey("FeeStructureId");

                    b.HasIndex("FeePaymentId");

                    b.HasIndex("refClassesClassId");

                    b.HasIndex("refFeeTypeFeetypeId");

                    b.ToTable("FeeStructures");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.FeeType", b =>
                {
                    b.Property<int>("FeetypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeetypeId"));

                    b.Property<string>("FeeTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeeTypeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FeeTypeStatusDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FeetypeId");

                    b.ToTable("FeeTypes");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.Parent", b =>
                {
                    b.Property<int>("ParentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParentId"));

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuardianEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuardianPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParentId");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.Resource", b =>
                {
                    b.Property<int>("ResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResourceId"));

                    b.Property<int?>("ClassesClassId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("ResourceId");

                    b.HasIndex("ClassesClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SectionId"));

                    b.Property<int?>("ClassesClassId")
                        .HasColumnType("int");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SessionID")
                        .HasColumnType("int");

                    b.HasKey("SectionId");

                    b.HasIndex("ClassesClassId");

                    b.HasIndex("SessionID");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.Session", b =>
                {
                    b.Property<int>("SessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SessionID"));

                    b.Property<TimeSpan>("SessionDuration")
                        .HasColumnType("time");

                    b.Property<string>("SessionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SessionStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SessionID");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<int?>("ClassesClassId")
                        .HasColumnType("int");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("RollNumber")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("StudentAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StudentDOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentGender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.HasIndex("ClassesClassId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SectionId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"));

                    b.Property<int?>("SessionID")
                        .HasColumnType("int");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubjectId");

                    b.HasIndex("SessionID");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("StudentSubject", b =>
                {
                    b.Property<int>("refStudentsStudentId")
                        .HasColumnType("int");

                    b.Property<int>("refSubjectsSubjectId")
                        .HasColumnType("int");

                    b.HasKey("refStudentsStudentId", "refSubjectsSubjectId");

                    b.HasIndex("refSubjectsSubjectId");

                    b.ToTable("StudentSubject");
                });

            modelBuilder.Entity("AttendanceStudent", b =>
                {
                    b.HasOne("SchoolApp.Models.Models.Attendance", null)
                        .WithMany()
                        .HasForeignKey("refAttendancesAttendanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Models.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("refStudentsStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassesSubject", b =>
                {
                    b.HasOne("SchoolApp.Models.Models.Classes", null)
                        .WithMany()
                        .HasForeignKey("refClassesClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Models.Models.Subject", null)
                        .WithMany()
                        .HasForeignKey("refSubjectsSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExamSubject", b =>
                {
                    b.HasOne("SchoolApp.Models.Models.Exam", null)
                        .WithMany()
                        .HasForeignKey("refExamsExamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Models.Models.Subject", null)
                        .WithMany()
                        .HasForeignKey("refSubjectsSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolApp.Models.Models.AcademicMonth", b =>
                {
                    b.HasOne("SchoolApp.Models.Models.AcademicYear", null)
                        .WithMany("refAcademicMonth")
                        .HasForeignKey("AcademicYearId");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.Admission", b =>
                {
                    b.HasOne("SchoolApp.Models.Models.Enrollment", "refEnrollment")
                        .WithOne("Admission")
                        .HasForeignKey("SchoolApp.Models.Models.Admission", "EnrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Models.Models.Student", "refStudent")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Models.Models.AcademicYear", "refAcademicYear")
                        .WithMany("refAdmission")
                        .HasForeignKey("refAcademicYearAcademicYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("refAcademicYear");

                    b.Navigation("refEnrollment");

                    b.Navigation("refStudent");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.Classes", b =>
                {
                    b.HasOne("SchoolApp.Models.Models.Exam", null)
                        .WithMany("refClasses")
                        .HasForeignKey("ExamID");

                    b.HasOne("SchoolApp.Models.Models.Session", null)
                        .WithMany("refClasses")
                        .HasForeignKey("SessionID");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.Employee", b =>
                {
                    b.HasOne("SchoolApp.Models.Models.Attendance", null)
                        .WithMany("refEmployees")
                        .HasForeignKey("AttendanceId");

                    b.HasOne("SchoolApp.Models.Models.Subject", null)
                        .WithMany("refEmployees")
                        .HasForeignKey("SubjectId");

                    b.HasOne("SchoolApp.Models.Models.EmployeeType", "refEmployeeType")
                        .WithMany()
                        .HasForeignKey("refEmployeeTypeEmployeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("refEmployeeType");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.Enrollment", b =>
                {
                    b.HasOne("SchoolApp.Models.Models.Classes", "Class")
                        .WithMany("refEnrollments")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Models.Models.Student", "Student")
                        .WithMany("refEnrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.ExamSchedule", b =>
                {
                    b.HasOne("SchoolApp.Models.Models.Student", null)
                        .WithMany("refExamSchedules")
                        .HasForeignKey("StudentId");

                    b.HasOne("SchoolApp.Models.Models.Exam", "refExam")
                        .WithMany("refExamSchedules")
                        .HasForeignKey("refExamExamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("refExam");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.FeePayment", b =>
                {
                    b.HasOne("SchoolApp.Models.Models.AcademicMonth", null)
                        .WithMany("refFeePayment")
                        .HasForeignKey("AcademicMonthId");

                    b.HasOne("SchoolApp.Models.Models.Student", "refStudent")
                        .WithMany("refFeePayments")
                        .HasForeignKey("refStudentStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("refStudent");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.FeeStructure", b =>
                {
                    b.HasOne("SchoolApp.Models.Models.FeePayment", null)
                        .WithMany("refFeeStructures")
                        .HasForeignKey("FeePaymentId");

                    b.HasOne("SchoolApp.Models.Models.Classes", "refClasses")
                        .WithMany()
                        .HasForeignKey("refClassesClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Models.Models.FeeType", "refFeeType")
                        .WithMany()
                        .HasForeignKey("refFeeTypeFeetypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("refClasses");

                    b.Navigation("refFeeType");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.Resource", b =>
                {
                    b.HasOne("SchoolApp.Models.Models.Classes", null)
                        .WithMany("refResources")
                        .HasForeignKey("ClassesClassId");

                    b.HasOne("SchoolApp.Models.Models.Student", null)
                        .WithMany("refResources")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.Section", b =>
                {
                    b.HasOne("SchoolApp.Models.Models.Classes", null)
                        .WithMany("refSections")
                        .HasForeignKey("ClassesClassId");

                    b.HasOne("SchoolApp.Models.Models.Session", null)
                        .WithMany("refSections")
                        .HasForeignKey("SessionID");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.Student", b =>
                {
                    b.HasOne("SchoolApp.Models.Models.Classes", null)
                        .WithMany("refStudents")
                        .HasForeignKey("ClassesClassId");

                    b.HasOne("SchoolApp.Models.Models.Parent", "Parent")
                        .WithMany("refStudents")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Models.Models.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.Subject", b =>
                {
                    b.HasOne("SchoolApp.Models.Models.Session", null)
                        .WithMany("refSubjects")
                        .HasForeignKey("SessionID");
                });

            modelBuilder.Entity("StudentSubject", b =>
                {
                    b.HasOne("SchoolApp.Models.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("refStudentsStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Models.Models.Subject", null)
                        .WithMany()
                        .HasForeignKey("refSubjectsSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolApp.Models.Models.AcademicMonth", b =>
                {
                    b.Navigation("refFeePayment");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.AcademicYear", b =>
                {
                    b.Navigation("refAcademicMonth");

                    b.Navigation("refAdmission");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.Attendance", b =>
                {
                    b.Navigation("refEmployees");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.Classes", b =>
                {
                    b.Navigation("refEnrollments");

                    b.Navigation("refResources");

                    b.Navigation("refSections");

                    b.Navigation("refStudents");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.Enrollment", b =>
                {
                    b.Navigation("Admission")
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolApp.Models.Models.Exam", b =>
                {
                    b.Navigation("refClasses");

                    b.Navigation("refExamSchedules");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.FeePayment", b =>
                {
                    b.Navigation("refFeeStructures");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.Parent", b =>
                {
                    b.Navigation("refStudents");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.Session", b =>
                {
                    b.Navigation("refClasses");

                    b.Navigation("refSections");

                    b.Navigation("refSubjects");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.Student", b =>
                {
                    b.Navigation("refEnrollments");

                    b.Navigation("refExamSchedules");

                    b.Navigation("refFeePayments");

                    b.Navigation("refResources");
                });

            modelBuilder.Entity("SchoolApp.Models.Models.Subject", b =>
                {
                    b.Navigation("refEmployees");
                });
#pragma warning restore 612, 618
        }
    }
}
