// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolApp.DAL.SchoolContext;

#nullable disable

namespace SchoolApp.DAL.Migrations
{
    [DbContext(typeof(SchoolDbContext))]
    partial class SchoolDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "ProviderKey");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Attendance", b =>
                {
                    b.Property<int>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttendanceId"));

                    b.Property<bool?>("IsPresent")
                        .HasColumnType("bit");

                    b.Property<TimeSpan?>("SignInTime")
                        .HasColumnType("Time");

                    b.Property<TimeSpan?>("SignOutTime")
                        .HasColumnType("Time");

                    b.Property<DateTime?>("WorkingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AttendanceId");

                    b.ToTable("Attendance");

                    b.HasData(
                        new
                        {
                            AttendanceId = 1,
                            IsPresent = true,
                            WorkingDate = new DateTime(2024, 4, 8, 23, 15, 15, 533, DateTimeKind.Local).AddTicks(4666)
                        },
                        new
                        {
                            AttendanceId = 2,
                            IsPresent = true,
                            WorkingDate = new DateTime(2024, 4, 8, 23, 15, 15, 533, DateTimeKind.Local).AddTicks(4695)
                        },
                        new
                        {
                            AttendanceId = 3,
                            WorkingDate = new DateTime(2024, 4, 8, 23, 15, 15, 533, DateTimeKind.Local).AddTicks(4697)
                        });
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            DepartmentName = "IT"
                        },
                        new
                        {
                            DepartmentId = 2,
                            DepartmentName = "HR"
                        },
                        new
                        {
                            DepartmentId = 3,
                            DepartmentName = "Finance"
                        });
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.DueBalance", b =>
                {
                    b.Property<int>("DueBalanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DueBalanceId"));

                    b.Property<decimal?>("DueBalanceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("DueBalanceId");

                    b.HasIndex("StudentId");

                    b.ToTable("DueBalance");

                    b.HasData(
                        new
                        {
                            DueBalanceId = 1,
                            LastUpdate = new DateTime(2024, 4, 8, 23, 15, 15, 533, DateTimeKind.Local).AddTicks(5328),
                            StudentId = 1
                        },
                        new
                        {
                            DueBalanceId = 2,
                            LastUpdate = new DateTime(2024, 4, 8, 23, 15, 15, 533, DateTimeKind.Local).AddTicks(5334),
                            StudentId = 2
                        },
                        new
                        {
                            DueBalanceId = 3,
                            LastUpdate = new DateTime(2024, 4, 8, 23, 15, 15, 533, DateTimeKind.Local).AddTicks(5336),
                            StudentId = 3
                        });
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.ExamSchedule", b =>
                {
                    b.Property<int>("ExamScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamScheduleId"));

                    b.Property<string>("ExamScheduleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ExamTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("StandardId")
                        .HasColumnType("int");

                    b.HasKey("ExamScheduleId");

                    b.HasIndex("ExamTypeId");

                    b.HasIndex("StandardId");

                    b.ToTable("ExamSchedule");

                    b.HasData(
                        new
                        {
                            ExamScheduleId = 1,
                            ExamScheduleName = "Midterm Exam",
                            ExamTypeId = 1
                        },
                        new
                        {
                            ExamScheduleId = 2,
                            ExamScheduleName = "Final Exam",
                            ExamTypeId = 2
                        },
                        new
                        {
                            ExamScheduleId = 3,
                            ExamScheduleName = "Practical Exam",
                            ExamTypeId = 3
                        });
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.ExamSubject", b =>
                {
                    b.Property<int>("ExamSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamSubjectId"));

                    b.Property<DateTime?>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExamScheduleId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("ExamSubjectId");

                    b.HasIndex("ExamScheduleId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ExamSubject");

                    b.HasData(
                        new
                        {
                            ExamSubjectId = 1,
                            ExamDate = new DateTime(2024, 4, 8, 23, 15, 15, 533, DateTimeKind.Local).AddTicks(5491),
                            ExamScheduleId = 1,
                            SubjectId = 1
                        },
                        new
                        {
                            ExamSubjectId = 2,
                            ExamDate = new DateTime(2024, 4, 8, 23, 15, 15, 533, DateTimeKind.Local).AddTicks(5497),
                            ExamScheduleId = 2,
                            SubjectId = 2
                        },
                        new
                        {
                            ExamSubjectId = 3,
                            ExamDate = new DateTime(2024, 4, 8, 23, 15, 15, 533, DateTimeKind.Local).AddTicks(5499),
                            ExamScheduleId = 3,
                            SubjectId = 3
                        },
                        new
                        {
                            ExamSubjectId = 4,
                            ExamDate = new DateTime(2024, 4, 8, 23, 15, 15, 533, DateTimeKind.Local).AddTicks(5502),
                            ExamScheduleId = 1,
                            SubjectId = 1
                        },
                        new
                        {
                            ExamSubjectId = 5,
                            ExamDate = new DateTime(2024, 4, 8, 23, 15, 15, 533, DateTimeKind.Local).AddTicks(5504),
                            ExamScheduleId = 2,
                            SubjectId = 2
                        },
                        new
                        {
                            ExamSubjectId = 6,
                            ExamDate = new DateTime(2024, 4, 8, 23, 15, 15, 533, DateTimeKind.Local).AddTicks(5507),
                            ExamScheduleId = 3,
                            SubjectId = 3
                        });
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.ExamType", b =>
                {
                    b.Property<int>("ExamTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamTypeId"));

                    b.Property<string>("ExamTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExamTypeId");

                    b.ToTable("ExamType");

                    b.HasData(
                        new
                        {
                            ExamTypeId = 1,
                            ExamTypeName = "Midterm"
                        },
                        new
                        {
                            ExamTypeId = 2,
                            ExamTypeName = "Final"
                        },
                        new
                        {
                            ExamTypeId = 3,
                            ExamTypeName = "Practical"
                        });
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.FeePayment", b =>
                {
                    b.Property<int>("FeePaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeePaymentId"));

                    b.Property<decimal>("AmountAfterDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountRemaining")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PreviousDue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("StudentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalFeeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("FeePaymentId");

                    b.HasIndex("StudentId");

                    b.ToTable("FeePayment");

                    b.HasData(
                        new
                        {
                            FeePaymentId = 1,
                            AmountAfterDiscount = 900m,
                            AmountPaid = 500m,
                            AmountRemaining = 400m,
                            Discount = 10m,
                            PaymentDate = new DateTime(2024, 4, 8, 23, 15, 15, 533, DateTimeKind.Local).AddTicks(5876),
                            PreviousDue = 0m,
                            StudentId = 1,
                            StudentName = "John Doe",
                            TotalAmount = 900m,
                            TotalFeeAmount = 1000m
                        },
                        new
                        {
                            FeePaymentId = 2,
                            AmountAfterDiscount = 1300m,
                            AmountPaid = 1400m,
                            AmountRemaining = 0m,
                            Discount = 200m,
                            PaymentDate = new DateTime(2024, 4, 8, 23, 15, 15, 533, DateTimeKind.Local).AddTicks(5884),
                            PreviousDue = 100m,
                            StudentId = 2,
                            StudentName = "Jane Doe",
                            TotalAmount = 1400m,
                            TotalFeeAmount = 1500m
                        },
                        new
                        {
                            FeePaymentId = 3,
                            AmountAfterDiscount = 1200m,
                            AmountPaid = 1250m,
                            AmountRemaining = 0m,
                            Discount = 0m,
                            PaymentDate = new DateTime(2024, 4, 8, 23, 15, 15, 533, DateTimeKind.Local).AddTicks(5892),
                            PreviousDue = 50m,
                            StudentId = 3,
                            StudentName = "Alice Smith",
                            TotalAmount = 1250m,
                            TotalFeeAmount = 1200m
                        });
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.FeePaymentDetail", b =>
                {
                    b.Property<int>("FeePaymentDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeePaymentDetailId"));

                    b.Property<decimal>("FeeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FeePaymentId")
                        .HasColumnType("int");

                    b.Property<string>("FeeTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeePaymentDetailId");

                    b.HasIndex("FeePaymentId");

                    b.ToTable("FeePaymentDetail");

                    b.HasData(
                        new
                        {
                            FeePaymentDetailId = 1,
                            FeeAmount = 500m,
                            FeePaymentId = 1,
                            FeeTypeName = "Tuition Fee"
                        },
                        new
                        {
                            FeePaymentDetailId = 2,
                            FeeAmount = 100m,
                            FeePaymentId = 2,
                            FeeTypeName = "Library Fee"
                        },
                        new
                        {
                            FeePaymentDetailId = 3,
                            FeeAmount = 600m,
                            FeePaymentId = 3,
                            FeeTypeName = "Sports Fee"
                        },
                        new
                        {
                            FeePaymentDetailId = 4,
                            FeeAmount = 200m,
                            FeePaymentId = 1,
                            FeeTypeName = "Picnic Fee"
                        },
                        new
                        {
                            FeePaymentDetailId = 5,
                            FeeAmount = 700m,
                            FeePaymentId = 2,
                            FeeTypeName = "Party Fee"
                        },
                        new
                        {
                            FeePaymentDetailId = 6,
                            FeeAmount = 250m,
                            FeePaymentId = 3,
                            FeeTypeName = "Exam Fee"
                        });
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.FeeStructure", b =>
                {
                    b.Property<int>("FeeStructureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeeStructureId"));

                    b.Property<decimal>("FeeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("FeePaymentId")
                        .HasColumnType("int");

                    b.Property<int>("FeeTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("Monthly")
                        .HasColumnType("bit");

                    b.Property<int?>("StandardId")
                        .HasColumnType("int");

                    b.Property<string>("StandardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Yearly")
                        .HasColumnType("bit");

                    b.HasKey("FeeStructureId");

                    b.HasIndex("FeePaymentId");

                    b.HasIndex("FeeTypeId");

                    b.HasIndex("StandardId");

                    b.ToTable("FeeStructure");

                    b.HasData(
                        new
                        {
                            FeeStructureId = 1,
                            FeeAmount = 500m,
                            FeeTypeId = 1,
                            Monthly = false,
                            StandardId = 1,
                            StandardName = "Grade 1",
                            TypeName = "Registration Fee",
                            Yearly = true
                        },
                        new
                        {
                            FeeStructureId = 2,
                            FeeAmount = 1000m,
                            FeeTypeId = 2,
                            Monthly = true,
                            StandardId = 2,
                            StandardName = "Grade 2",
                            TypeName = "Tuition Fee",
                            Yearly = false
                        },
                        new
                        {
                            FeeStructureId = 3,
                            FeeAmount = 200m,
                            FeeTypeId = 3,
                            Monthly = false,
                            StandardId = 3,
                            StandardName = "Grade 3",
                            TypeName = "Library Fee",
                            Yearly = true
                        });
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.FeeType", b =>
                {
                    b.Property<int>("FeeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeeTypeId"));

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeeTypeId");

                    b.ToTable("FeeType");

                    b.HasData(
                        new
                        {
                            FeeTypeId = 1,
                            TypeName = "Registration Fee"
                        },
                        new
                        {
                            FeeTypeId = 2,
                            TypeName = "Tuition Fee"
                        },
                        new
                        {
                            FeeTypeId = 3,
                            TypeName = "Library Fee"
                        });
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Mark", b =>
                {
                    b.Property<int>("MarkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MarkId"));

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Grade")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MarkEntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ObtainedScore")
                        .HasColumnType("int");

                    b.Property<int?>("PassMarks")
                        .HasColumnType("int");

                    b.Property<int?>("PassStatus")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int?>("TotalMarks")
                        .HasColumnType("int");

                    b.HasKey("MarkId");

                    b.HasIndex("StaffId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Mark");

                    b.HasData(
                        new
                        {
                            MarkId = 1,
                            Feedback = "Good job!",
                            Grade = 1,
                            MarkEntryDate = new DateTime(2024, 4, 8, 23, 15, 15, 533, DateTimeKind.Local).AddTicks(6281),
                            ObtainedScore = 65,
                            PassMarks = 40,
                            PassStatus = 0,
                            StaffId = 1,
                            StudentId = 1,
                            SubjectId = 1,
                            TotalMarks = 80
                        },
                        new
                        {
                            MarkId = 2,
                            Feedback = "Excellent work!",
                            Grade = 0,
                            MarkEntryDate = new DateTime(2024, 4, 8, 23, 15, 15, 533, DateTimeKind.Local).AddTicks(6289),
                            ObtainedScore = 75,
                            PassMarks = 40,
                            PassStatus = 0,
                            StaffId = 2,
                            StudentId = 2,
                            SubjectId = 2,
                            TotalMarks = 90
                        },
                        new
                        {
                            MarkId = 3,
                            Feedback = "Excellent work!",
                            Grade = 0,
                            MarkEntryDate = new DateTime(2024, 4, 8, 23, 15, 15, 533, DateTimeKind.Local).AddTicks(6297),
                            ObtainedScore = 75,
                            PassMarks = 40,
                            PassStatus = 0,
                            StaffId = 3,
                            StudentId = 3,
                            SubjectId = 3,
                            TotalMarks = 90
                        });
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<int?>("AttendanceId")
                        .HasColumnType("int");

                    b.Property<string>("BankAccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BankAccountNumber")
                        .HasColumnType("int");

                    b.Property<string>("BankBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("Designation")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("JoiningDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MotherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermanentAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StaffSalaryId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemporaryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StaffId");

                    b.HasIndex("AttendanceId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("StaffSalaryId");

                    b.ToTable("Staff");

                    b.HasData(
                        new
                        {
                            StaffId = 1,
                            DepartmentId = 1,
                            Gender = 0,
                            StaffName = "John Doe",
                            StaffSalaryId = 1,
                            Status = "Active"
                        },
                        new
                        {
                            StaffId = 2,
                            DepartmentId = 2,
                            Gender = 1,
                            StaffName = "Jane Smith",
                            StaffSalaryId = 2,
                            Status = "Active"
                        },
                        new
                        {
                            StaffId = 3,
                            DepartmentId = 3,
                            Gender = 1,
                            StaffName = "Jane Smith",
                            StaffSalaryId = 3,
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.StaffExperience", b =>
                {
                    b.Property<int>("StaffExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffExperienceId"));

                    b.Property<string>("Achievements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LeavingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Responsibilities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("StaffExperienceId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffExperience");

                    b.HasData(
                        new
                        {
                            StaffExperienceId = 1,
                            Achievements = "Improved student performance by 20%",
                            CompanyName = "ABC School",
                            Designation = "Teacher",
                            JoiningDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LeavingDate = new DateTime(2024, 4, 8, 23, 15, 15, 533, DateTimeKind.Local).AddTicks(6453),
                            Responsibilities = "Teaching Mathematics and Physics"
                        },
                        new
                        {
                            StaffExperienceId = 2,
                            Achievements = "Improved student performance by 20%",
                            CompanyName = "ABC School",
                            Designation = "Teacher",
                            JoiningDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LeavingDate = new DateTime(2024, 4, 8, 23, 15, 15, 533, DateTimeKind.Local).AddTicks(6459),
                            Responsibilities = "Teaching Mathematics and Physics"
                        },
                        new
                        {
                            StaffExperienceId = 3,
                            Achievements = "Improved student performance by 20%",
                            CompanyName = "ABC School",
                            Designation = "Teacher",
                            JoiningDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LeavingDate = new DateTime(2024, 4, 8, 23, 15, 15, 533, DateTimeKind.Local).AddTicks(6462),
                            Responsibilities = "Teaching Mathematics and Physics"
                        });
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.StaffSalary", b =>
                {
                    b.Property<int>("StaffSalaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffSalaryId"));

                    b.Property<decimal?>("Allowance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BasicSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("FestivalBonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("HousingAllowance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MedicalAllowance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("NetSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SavingFund")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Taxes")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TransportationAllowance")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("StaffSalaryId");

                    b.ToTable("StaffSalary");

                    b.HasData(
                        new
                        {
                            StaffSalaryId = 1,
                            Allowance = 500m,
                            BasicSalary = 5000m,
                            FestivalBonus = 1000m,
                            HousingAllowance = 800m,
                            MedicalAllowance = 300m,
                            SavingFund = 200m,
                            Taxes = 500m,
                            TransportationAllowance = 200m
                        },
                        new
                        {
                            StaffSalaryId = 2,
                            Allowance = 500m,
                            BasicSalary = 5000m,
                            FestivalBonus = 1000m,
                            HousingAllowance = 800m,
                            MedicalAllowance = 300m,
                            SavingFund = 200m,
                            Taxes = 500m,
                            TransportationAllowance = 200m
                        },
                        new
                        {
                            StaffSalaryId = 3,
                            Allowance = 500m,
                            BasicSalary = 5000m,
                            FestivalBonus = 1000m,
                            HousingAllowance = 800m,
                            MedicalAllowance = 300m,
                            SavingFund = 200m,
                            Taxes = 500m,
                            TransportationAllowance = 200m
                        });
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Standard", b =>
                {
                    b.Property<int>("StandardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StandardId"));

                    b.Property<string>("StandardCapacity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StandardName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StandardId");

                    b.ToTable("Standard");

                    b.HasData(
                        new
                        {
                            StandardId = 1,
                            StandardCapacity = "30 students",
                            StandardName = "Standard 1"
                        },
                        new
                        {
                            StandardId = 2,
                            StandardCapacity = "35 students",
                            StandardName = "Standard 2"
                        },
                        new
                        {
                            StandardId = 3,
                            StandardCapacity = "35 students",
                            StandardName = "Standard 2"
                        });
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<int?>("AdmissionNo")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("AttendanceId")
                        .HasColumnType("int");

                    b.Property<int>("EnrollmentNo")
                        .HasColumnType("int");

                    b.Property<string>("FatherContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherNID")
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalGuardianContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalGuardianName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherNID")
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<string>("MotherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermanentAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StandardId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("StudentBloodGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentContactNumber1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentContactNumber2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StudentDOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentGender")
                        .HasColumnType("int");

                    b.Property<string>("StudentNIDNumber")
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<string>("StudentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentNationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentReligion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemporaryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.HasIndex("AdmissionNo")
                        .IsUnique();

                    b.HasIndex("AttendanceId");

                    b.HasIndex("EnrollmentNo")
                        .IsUnique();

                    b.HasIndex("StandardId");

                    b.ToTable("Student");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            AdmissionNo = 1000,
                            EnrollmentNo = 2000,
                            FatherContactNumber = "9876543210",
                            FatherNID = "17948678987624322",
                            FatherName = "Michael Doe",
                            LocalGuardianContactNumber = "9876543230",
                            LocalGuardianName = "Jane Smith",
                            MotherContactNumber = "9876543220",
                            MotherNID = "17948678987754322",
                            MotherName = "Alice Doe",
                            PermanentAddress = "123 Main Street, City, Country",
                            StandardId = 1,
                            StudentBloodGroup = "A+",
                            StudentContactNumber1 = "1234567890",
                            StudentDOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentEmail = "john.doe@example.com",
                            StudentGender = 0,
                            StudentNIDNumber = "17948678987654320",
                            StudentName = "John Doe",
                            StudentNationality = "American",
                            TemporaryAddress = "456 Elm Street, City, Country"
                        },
                        new
                        {
                            StudentId = 2,
                            AdmissionNo = 1001,
                            EnrollmentNo = 2001,
                            FatherContactNumber = "9876543210",
                            FatherNID = "17948578987654322",
                            FatherName = "Michael Doe",
                            LocalGuardianContactNumber = "9876543230",
                            LocalGuardianName = "Jane Smith",
                            MotherContactNumber = "9876543220",
                            MotherNID = "17948674987654322",
                            MotherName = "Alice Doe",
                            PermanentAddress = "123 Main Street, City, Country",
                            StandardId = 2,
                            StudentBloodGroup = "A+",
                            StudentContactNumber1 = "1234567890",
                            StudentDOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentEmail = "john.doe@example.com",
                            StudentGender = 0,
                            StudentNIDNumber = "17948678987654322",
                            StudentName = "John Doe",
                            StudentNationality = "American",
                            TemporaryAddress = "456 Elm Street, City, Country"
                        },
                        new
                        {
                            StudentId = 3,
                            AdmissionNo = 1002,
                            EnrollmentNo = 2002,
                            FatherContactNumber = "9876543210",
                            FatherNID = "17345678987654322",
                            FatherName = "Michael Doe",
                            LocalGuardianContactNumber = "9876543230",
                            LocalGuardianName = "Jane Smith",
                            MotherContactNumber = "9876543220",
                            MotherNID = "12345678987654322",
                            MotherName = "Alice Doe",
                            PermanentAddress = "123 Main Street, City, Country",
                            StandardId = 3,
                            StudentBloodGroup = "A+",
                            StudentContactNumber1 = "1234567890",
                            StudentDOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentEmail = "john.doe@example.com",
                            StudentGender = 0,
                            StudentNIDNumber = "17945678987654322",
                            StudentName = "John Doe",
                            StudentNationality = "American",
                            TemporaryAddress = "456 Elm Street, City, Country"
                        });
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"));

                    b.Property<int?>("StandardId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectCode")
                        .HasColumnType("int");

                    b.Property<string>("SubjectName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubjectId");

                    b.HasIndex("StandardId");

                    b.HasIndex("SubjectCode")
                        .IsUnique()
                        .HasFilter("[SubjectCode] IS NOT NULL");

                    b.ToTable("Subject");

                    b.HasData(
                        new
                        {
                            SubjectId = 1,
                            StandardId = 1,
                            SubjectCode = 101,
                            SubjectName = "Mathematics"
                        },
                        new
                        {
                            SubjectId = 2,
                            StandardId = 2,
                            SubjectCode = 102,
                            SubjectName = "Physics"
                        },
                        new
                        {
                            SubjectId = 3,
                            StandardId = 3,
                            SubjectCode = 103,
                            SubjectName = "Chemistry"
                        },
                        new
                        {
                            SubjectId = 4,
                            StandardId = 1,
                            SubjectCode = 104,
                            SubjectName = "Biology"
                        },
                        new
                        {
                            SubjectId = 5,
                            StandardId = 2,
                            SubjectCode = 105,
                            SubjectName = "Computer Science"
                        },
                        new
                        {
                            SubjectId = 6,
                            StandardId = 3,
                            SubjectCode = 106,
                            SubjectName = "Electronics"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.DueBalance", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.ExamSchedule", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.ExamType", "ExamType")
                        .WithMany()
                        .HasForeignKey("ExamTypeId");

                    b.HasOne("SchoolApp.Models.DataModels.Standard", "Standard")
                        .WithMany()
                        .HasForeignKey("StandardId");

                    b.Navigation("ExamType");

                    b.Navigation("Standard");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.ExamSubject", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.ExamSchedule", "ExamSchedule")
                        .WithMany("ExamSubjects")
                        .HasForeignKey("ExamScheduleId");

                    b.HasOne("SchoolApp.Models.DataModels.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId");

                    b.Navigation("ExamSchedule");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.FeePayment", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.FeePaymentDetail", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.FeePayment", null)
                        .WithMany("FeePaymentDetails")
                        .HasForeignKey("FeePaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.FeeStructure", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.FeePayment", "FeePayment")
                        .WithMany("FeeStructures")
                        .HasForeignKey("FeePaymentId");

                    b.HasOne("SchoolApp.Models.DataModels.FeeType", "FeeType")
                        .WithMany()
                        .HasForeignKey("FeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Models.DataModels.Standard", "Standard")
                        .WithMany()
                        .HasForeignKey("StandardId");

                    b.Navigation("FeePayment");

                    b.Navigation("FeeType");

                    b.Navigation("Standard");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Mark", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Models.DataModels.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.HasOne("SchoolApp.Models.DataModels.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Staff");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Staff", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.Attendance", null)
                        .WithMany("Staffs")
                        .HasForeignKey("AttendanceId");

                    b.HasOne("SchoolApp.Models.DataModels.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("SchoolApp.Models.DataModels.StaffSalary", "StaffSalary")
                        .WithMany()
                        .HasForeignKey("StaffSalaryId");

                    b.Navigation("Department");

                    b.Navigation("StaffSalary");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.StaffExperience", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.Staff", null)
                        .WithMany("StaffExperiences")
                        .HasForeignKey("StaffId");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Student", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.Attendance", null)
                        .WithMany("Students")
                        .HasForeignKey("AttendanceId");

                    b.HasOne("SchoolApp.Models.DataModels.Standard", "Standard")
                        .WithMany()
                        .HasForeignKey("StandardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Standard");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Subject", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.Standard", "Standard")
                        .WithMany()
                        .HasForeignKey("StandardId");

                    b.Navigation("Standard");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Attendance", b =>
                {
                    b.Navigation("Staffs");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.ExamSchedule", b =>
                {
                    b.Navigation("ExamSubjects");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.FeePayment", b =>
                {
                    b.Navigation("FeePaymentDetails");

                    b.Navigation("FeeStructures");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Staff", b =>
                {
                    b.Navigation("StaffExperiences");
                });
#pragma warning restore 612, 618
        }
    }
}
