// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolApp.DAL.SchoolContext;

#nullable disable

namespace SchoolApp.DAL.Migrations
{
    [DbContext(typeof(SchoolDbContext))]
    [Migration("20240420130728_Mig1")]
    partial class Mig1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "ProviderKey");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.AcademicMonth", b =>
                {
                    b.Property<int>("MonthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MonthId"));

                    b.Property<string>("MonthName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MonthlyPaymentId")
                        .HasColumnType("int");

                    b.HasKey("MonthId");

                    b.HasIndex("MonthlyPaymentId");

                    b.ToTable("AcademicMonth");

                    b.HasData(
                        new
                        {
                            MonthId = 1,
                            MonthName = "January"
                        },
                        new
                        {
                            MonthId = 2,
                            MonthName = "February"
                        },
                        new
                        {
                            MonthId = 3,
                            MonthName = "March"
                        },
                        new
                        {
                            MonthId = 4,
                            MonthName = "April"
                        },
                        new
                        {
                            MonthId = 5,
                            MonthName = "May"
                        },
                        new
                        {
                            MonthId = 6,
                            MonthName = "June"
                        },
                        new
                        {
                            MonthId = 7,
                            MonthName = "July"
                        },
                        new
                        {
                            MonthId = 8,
                            MonthName = "August"
                        },
                        new
                        {
                            MonthId = 9,
                            MonthName = "September"
                        },
                        new
                        {
                            MonthId = 10,
                            MonthName = "October"
                        },
                        new
                        {
                            MonthId = 11,
                            MonthName = "November"
                        },
                        new
                        {
                            MonthId = 12,
                            MonthName = "December"
                        });
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.AcademicYear", b =>
                {
                    b.Property<int>("AcademicYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcademicYearId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcademicYearId");

                    b.ToTable("AcademicYear");

                    b.HasData(
                        new
                        {
                            AcademicYearId = 1,
                            Name = "2000"
                        },
                        new
                        {
                            AcademicYearId = 2,
                            Name = "2001"
                        },
                        new
                        {
                            AcademicYearId = 3,
                            Name = "2002"
                        },
                        new
                        {
                            AcademicYearId = 4,
                            Name = "2003"
                        },
                        new
                        {
                            AcademicYearId = 5,
                            Name = "2004"
                        },
                        new
                        {
                            AcademicYearId = 6,
                            Name = "2005"
                        },
                        new
                        {
                            AcademicYearId = 7,
                            Name = "2006"
                        },
                        new
                        {
                            AcademicYearId = 8,
                            Name = "2007"
                        },
                        new
                        {
                            AcademicYearId = 9,
                            Name = "2008"
                        },
                        new
                        {
                            AcademicYearId = 10,
                            Name = "2009"
                        },
                        new
                        {
                            AcademicYearId = 11,
                            Name = "2010"
                        },
                        new
                        {
                            AcademicYearId = 12,
                            Name = "2011"
                        },
                        new
                        {
                            AcademicYearId = 13,
                            Name = "2012"
                        },
                        new
                        {
                            AcademicYearId = 14,
                            Name = "2013"
                        },
                        new
                        {
                            AcademicYearId = 15,
                            Name = "2014"
                        },
                        new
                        {
                            AcademicYearId = 16,
                            Name = "2015"
                        },
                        new
                        {
                            AcademicYearId = 17,
                            Name = "2016"
                        },
                        new
                        {
                            AcademicYearId = 18,
                            Name = "2017"
                        },
                        new
                        {
                            AcademicYearId = 19,
                            Name = "2018"
                        },
                        new
                        {
                            AcademicYearId = 20,
                            Name = "2019"
                        },
                        new
                        {
                            AcademicYearId = 21,
                            Name = "2020"
                        },
                        new
                        {
                            AcademicYearId = 22,
                            Name = "2021"
                        },
                        new
                        {
                            AcademicYearId = 23,
                            Name = "2022"
                        },
                        new
                        {
                            AcademicYearId = 24,
                            Name = "2023"
                        },
                        new
                        {
                            AcademicYearId = 25,
                            Name = "2024"
                        },
                        new
                        {
                            AcademicYearId = 26,
                            Name = "2025"
                        },
                        new
                        {
                            AcademicYearId = 27,
                            Name = "2026"
                        },
                        new
                        {
                            AcademicYearId = 28,
                            Name = "2027"
                        },
                        new
                        {
                            AcademicYearId = 29,
                            Name = "2028"
                        },
                        new
                        {
                            AcademicYearId = 30,
                            Name = "2029"
                        },
                        new
                        {
                            AcademicYearId = 31,
                            Name = "2030"
                        },
                        new
                        {
                            AcademicYearId = 32,
                            Name = "2031"
                        },
                        new
                        {
                            AcademicYearId = 33,
                            Name = "2032"
                        },
                        new
                        {
                            AcademicYearId = 34,
                            Name = "2033"
                        },
                        new
                        {
                            AcademicYearId = 35,
                            Name = "2034"
                        },
                        new
                        {
                            AcademicYearId = 36,
                            Name = "2035"
                        },
                        new
                        {
                            AcademicYearId = 37,
                            Name = "2036"
                        },
                        new
                        {
                            AcademicYearId = 38,
                            Name = "2037"
                        },
                        new
                        {
                            AcademicYearId = 39,
                            Name = "2038"
                        },
                        new
                        {
                            AcademicYearId = 40,
                            Name = "2039"
                        },
                        new
                        {
                            AcademicYearId = 41,
                            Name = "2040"
                        },
                        new
                        {
                            AcademicYearId = 42,
                            Name = "2041"
                        },
                        new
                        {
                            AcademicYearId = 43,
                            Name = "2042"
                        },
                        new
                        {
                            AcademicYearId = 44,
                            Name = "2043"
                        },
                        new
                        {
                            AcademicYearId = 45,
                            Name = "2044"
                        },
                        new
                        {
                            AcademicYearId = 46,
                            Name = "2045"
                        },
                        new
                        {
                            AcademicYearId = 47,
                            Name = "2046"
                        },
                        new
                        {
                            AcademicYearId = 48,
                            Name = "2047"
                        },
                        new
                        {
                            AcademicYearId = 49,
                            Name = "2048"
                        },
                        new
                        {
                            AcademicYearId = 50,
                            Name = "2049"
                        },
                        new
                        {
                            AcademicYearId = 51,
                            Name = "2050"
                        });
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Attendance", b =>
                {
                    b.Property<int>("AttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttendanceId"));

                    b.Property<int>("AttendanceIdentificationNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("AttendanceId");

                    b.ToTable("Attendance");

                    b.HasData(
                        new
                        {
                            AttendanceId = 1,
                            AttendanceIdentificationNumber = 111,
                            Date = new DateTime(2024, 4, 20, 19, 7, 27, 238, DateTimeKind.Local).AddTicks(8783),
                            IsPresent = true,
                            Type = 0
                        },
                        new
                        {
                            AttendanceId = 2,
                            AttendanceIdentificationNumber = 111,
                            Date = new DateTime(2024, 4, 20, 19, 7, 27, 238, DateTimeKind.Local).AddTicks(8794),
                            IsPresent = true,
                            Type = 0
                        },
                        new
                        {
                            AttendanceId = 3,
                            AttendanceIdentificationNumber = 111,
                            Date = new DateTime(2024, 4, 20, 19, 7, 27, 238, DateTimeKind.Local).AddTicks(8795),
                            IsPresent = true,
                            Type = 0
                        },
                        new
                        {
                            AttendanceId = 4,
                            AttendanceIdentificationNumber = 111,
                            Date = new DateTime(2024, 4, 20, 19, 7, 27, 238, DateTimeKind.Local).AddTicks(8795),
                            IsPresent = true,
                            Type = 0
                        });
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            DepartmentName = "IT"
                        },
                        new
                        {
                            DepartmentId = 2,
                            DepartmentName = "HR"
                        },
                        new
                        {
                            DepartmentId = 3,
                            DepartmentName = "Finance"
                        });
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.DueBalance", b =>
                {
                    b.Property<int>("DueBalanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DueBalanceId"));

                    b.Property<decimal?>("DueBalanceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MonthlyPaymentId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("DueBalanceId");

                    b.HasIndex("MonthlyPaymentId");

                    b.HasIndex("StudentId");

                    b.ToTable("DueBalance");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.ExamSchedule", b =>
                {
                    b.Property<int>("ExamScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamScheduleId"));

                    b.Property<string>("ExamScheduleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExamScheduleId");

                    b.ToTable("ExamSchedule");

                    b.HasData(
                        new
                        {
                            ExamScheduleId = 1,
                            ExamScheduleName = "Midterm Exam"
                        },
                        new
                        {
                            ExamScheduleId = 2,
                            ExamScheduleName = "Final Exam"
                        },
                        new
                        {
                            ExamScheduleId = 3,
                            ExamScheduleName = "Practical Exam"
                        });
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.ExamScheduleStandard", b =>
                {
                    b.Property<int>("ExamScheduleStandardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamScheduleStandardId"));

                    b.Property<int>("ExamScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("StandardId")
                        .HasColumnType("int");

                    b.HasKey("ExamScheduleStandardId");

                    b.HasIndex("ExamScheduleId");

                    b.HasIndex("StandardId");

                    b.ToTable("ExamScheduleStandard");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.ExamSubject", b =>
                {
                    b.Property<int>("ExamSubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamSubjectId"));

                    b.Property<DateTime?>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("ExamEndTime")
                        .HasColumnType("time");

                    b.Property<int>("ExamScheduleStandardId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("ExamStartTime")
                        .HasColumnType("time");

                    b.Property<int>("ExamTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("ExamSubjectId");

                    b.HasIndex("ExamScheduleStandardId");

                    b.HasIndex("ExamTypeId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ExamSubject");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.ExamType", b =>
                {
                    b.Property<int>("ExamTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamTypeId"));

                    b.Property<string>("ExamTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExamTypeId");

                    b.ToTable("ExamType");

                    b.HasData(
                        new
                        {
                            ExamTypeId = 1,
                            ExamTypeName = "Midterm"
                        },
                        new
                        {
                            ExamTypeId = 2,
                            ExamTypeName = "Final"
                        },
                        new
                        {
                            ExamTypeId = 3,
                            ExamTypeName = "Practical"
                        });
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Fee", b =>
                {
                    b.Property<int>("FeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeeId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeeTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("MonthlyPaymentId")
                        .HasColumnType("int");

                    b.Property<int?>("OthersPaymentId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentFrequency")
                        .HasColumnType("int");

                    b.Property<int>("StandardId")
                        .HasColumnType("int");

                    b.HasKey("FeeId");

                    b.HasIndex("FeeTypeId");

                    b.HasIndex("MonthlyPaymentId");

                    b.HasIndex("OthersPaymentId");

                    b.HasIndex("StandardId");

                    b.ToTable("Fee");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.FeeType", b =>
                {
                    b.Property<int>("FeeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeeTypeId"));

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeeTypeId");

                    b.ToTable("FeeType");

                    b.HasData(
                        new
                        {
                            FeeTypeId = 1,
                            TypeName = "Registration Fee"
                        },
                        new
                        {
                            FeeTypeId = 2,
                            TypeName = "Tuition Fee"
                        },
                        new
                        {
                            FeeTypeId = 3,
                            TypeName = "Library Fee"
                        });
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Mark", b =>
                {
                    b.Property<int>("MarkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MarkId"));

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MarkEntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ObtainedScore")
                        .HasColumnType("int");

                    b.Property<int>("PassMarks")
                        .HasColumnType("int");

                    b.Property<int>("PassStatus")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("TotalMarks")
                        .HasColumnType("int");

                    b.HasKey("MarkId");

                    b.HasIndex("StaffId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Mark");

                    b.HasData(
                        new
                        {
                            MarkId = 1,
                            Feedback = "Good job!",
                            Grade = 1,
                            MarkEntryDate = new DateTime(2024, 4, 20, 19, 7, 27, 238, DateTimeKind.Local).AddTicks(8924),
                            ObtainedScore = 65,
                            PassMarks = 40,
                            PassStatus = 0,
                            StaffId = 1,
                            StudentId = 1,
                            SubjectId = 1,
                            TotalMarks = 80
                        },
                        new
                        {
                            MarkId = 2,
                            Feedback = "Excellent work!",
                            Grade = 0,
                            MarkEntryDate = new DateTime(2024, 4, 20, 19, 7, 27, 238, DateTimeKind.Local).AddTicks(8928),
                            ObtainedScore = 75,
                            PassMarks = 40,
                            PassStatus = 0,
                            StaffId = 2,
                            StudentId = 2,
                            SubjectId = 2,
                            TotalMarks = 90
                        },
                        new
                        {
                            MarkId = 3,
                            Feedback = "Excellent work!",
                            Grade = 0,
                            MarkEntryDate = new DateTime(2024, 4, 20, 19, 7, 27, 238, DateTimeKind.Local).AddTicks(8930),
                            ObtainedScore = 75,
                            PassMarks = 40,
                            PassStatus = 0,
                            StaffId = 3,
                            StudentId = 3,
                            SubjectId = 3,
                            TotalMarks = 90
                        });
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.MonthlyPayment", b =>
                {
                    b.Property<int>("MonthlyPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MonthlyPaymentId"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountRemaining")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PreviousDue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalFeeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Waver")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MonthlyPaymentId");

                    b.HasIndex("StudentId");

                    b.ToTable("MonthlyPayment");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.OtherPaymentDetail", b =>
                {
                    b.Property<int>("PaymentDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentDetailId"));

                    b.Property<decimal>("FeeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OthersPaymentId")
                        .HasColumnType("int");

                    b.HasKey("PaymentDetailId");

                    b.HasIndex("OthersPaymentId");

                    b.ToTable("OtherPaymentDetail");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.OthersPayment", b =>
                {
                    b.Property<int>("OthersPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OthersPaymentId"));

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountRemaining")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OthersPaymentId");

                    b.HasIndex("StudentId");

                    b.ToTable("OthersPayment");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.PaymentDetail", b =>
                {
                    b.Property<int>("PaymentDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentDetailId"));

                    b.Property<decimal>("FeeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MonthlyPaymentId")
                        .HasColumnType("int");

                    b.HasKey("PaymentDetailId");

                    b.HasIndex("MonthlyPaymentId");

                    b.ToTable("PaymentDetail");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.PaymentMonth", b =>
                {
                    b.Property<int>("PaymentMonthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentMonthId"));

                    b.Property<string>("MonthName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MonthlyPaymentId")
                        .HasColumnType("int");

                    b.HasKey("PaymentMonthId");

                    b.HasIndex("MonthlyPaymentId");

                    b.ToTable("PaymentMonth");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.SecurityModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"));

                    b.Property<string>("BankAccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BankAccountNumber")
                        .HasColumnType("int");

                    b.Property<string>("BankBranch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("Designation")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("JoiningDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MotherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermanentAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StaffSalaryId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemporaryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniqueStaffAttendanceNumber")
                        .HasColumnType("int");

                    b.HasKey("StaffId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("StaffSalaryId");

                    b.HasIndex("UniqueStaffAttendanceNumber")
                        .IsUnique();

                    b.ToTable("Staff");

                    b.HasData(
                        new
                        {
                            StaffId = 1,
                            BankAccountName = "John Doe",
                            BankAccountNumber = 1234567890,
                            BankBranch = "XYZ Branch",
                            BankName = "ABC Bank",
                            ContactNumber1 = "1234567890",
                            DOB = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 1,
                            Designation = 13,
                            Email = "john.doe@example.com",
                            FatherName = "Michael Doe",
                            Gender = 0,
                            ImagePath = "path/to/image.jpg",
                            JoiningDate = new DateTime(2010, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MotherName = "Alice Doe",
                            PermanentAddress = "Permanent Address",
                            Qualifications = "Bachelor's in Computer Science",
                            StaffName = "Jamir King",
                            StaffSalaryId = 1,
                            Status = "Active",
                            TemporaryAddress = "Temporary Address",
                            UniqueStaffAttendanceNumber = 201
                        },
                        new
                        {
                            StaffId = 2,
                            BankAccountName = "Alice Smith",
                            BankAccountNumber = 9873210,
                            BankBranch = "UVW Branch",
                            BankName = "DEF Bank",
                            ContactNumber1 = "9876543210",
                            DOB = new DateTime(1990, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 2,
                            Designation = 2,
                            Email = "alice.smith@example.com",
                            FatherName = "David Smith",
                            Gender = 1,
                            ImagePath = "path/to/image.jpg",
                            JoiningDate = new DateTime(2015, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MotherName = "Emily Smith",
                            PermanentAddress = "Permanent Address",
                            Qualifications = "Master's in Education",
                            StaffName = "Jamir Jamidar",
                            StaffSalaryId = 2,
                            Status = "Active",
                            TemporaryAddress = "Temporary Address",
                            UniqueStaffAttendanceNumber = 202
                        },
                        new
                        {
                            StaffId = 3,
                            BankAccountName = "John Doe",
                            BankAccountNumber = 1234567890,
                            BankBranch = "Main Street",
                            BankName = "Anytown Bank",
                            ContactNumber1 = "555-123-4567",
                            DOB = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentId = 3,
                            Designation = 7,
                            Email = "john.doe@example.com",
                            FatherName = "Richard Doe",
                            Gender = 0,
                            JoiningDate = new DateTime(2020, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MotherName = "Jane Doe",
                            PermanentAddress = "456 Elm Street, Anytown",
                            Qualifications = "Bachelor of Science in Mathematics",
                            StaffName = "Jamir Amir",
                            StaffSalaryId = 3,
                            Status = "Active",
                            TemporaryAddress = "123 Main Street, Anytown",
                            UniqueStaffAttendanceNumber = 203
                        });
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.StaffExperience", b =>
                {
                    b.Property<int>("StaffExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffExperienceId"));

                    b.Property<string>("Achievements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LeavingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Responsibilities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("StaffExperienceId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffExperience");

                    b.HasData(
                        new
                        {
                            StaffExperienceId = 1,
                            Achievements = "Received Employee of the Month award.",
                            CompanyName = "ABC Company",
                            Designation = "Software Engineer",
                            JoiningDate = new DateTime(2020, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LeavingDate = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Responsibilities = "Developed web applications."
                        },
                        new
                        {
                            StaffExperienceId = 2,
                            Achievements = "Implemented a new data visualization system.",
                            CompanyName = "XYZ Corporation",
                            Designation = "Data Analyst",
                            JoiningDate = new DateTime(2018, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LeavingDate = new DateTime(2020, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Responsibilities = "Analyzed data to provide insights."
                        },
                        new
                        {
                            StaffExperienceId = 3,
                            Achievements = "Successfully delivered multiple projects on time.",
                            CompanyName = "EFG Ltd.",
                            Designation = "Project Manager",
                            JoiningDate = new DateTime(2016, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LeavingDate = new DateTime(2018, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Responsibilities = "Led a team of developers."
                        });
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.StaffSalary", b =>
                {
                    b.Property<int>("StaffSalaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffSalaryId"));

                    b.Property<decimal?>("Allowance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("BasicSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("FestivalBonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("HousingAllowance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MedicalAllowance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("NetSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SavingFund")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StaffName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Taxes")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TransportationAllowance")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("StaffSalaryId");

                    b.ToTable("StaffSalary");

                    b.HasData(
                        new
                        {
                            StaffSalaryId = 1,
                            Allowance = 500m,
                            BasicSalary = 5000m,
                            FestivalBonus = 1000m,
                            HousingAllowance = 800m,
                            MedicalAllowance = 300m,
                            SavingFund = 200m,
                            StaffName = "Jamir King",
                            Taxes = 500m,
                            TransportationAllowance = 200m
                        },
                        new
                        {
                            StaffSalaryId = 2,
                            Allowance = 500m,
                            BasicSalary = 5000m,
                            FestivalBonus = 1000m,
                            HousingAllowance = 800m,
                            MedicalAllowance = 300m,
                            SavingFund = 200m,
                            StaffName = "Jamir Jamidar",
                            Taxes = 500m,
                            TransportationAllowance = 200m
                        },
                        new
                        {
                            StaffSalaryId = 3,
                            Allowance = 500m,
                            BasicSalary = 5000m,
                            FestivalBonus = 1000m,
                            HousingAllowance = 800m,
                            MedicalAllowance = 300m,
                            SavingFund = 200m,
                            StaffName = "Jamir Amir",
                            Taxes = 500m,
                            TransportationAllowance = 200m
                        });
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Standard", b =>
                {
                    b.Property<int>("StandardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StandardId"));

                    b.Property<string>("StandardCapacity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StandardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StandardId");

                    b.ToTable("Standard");

                    b.HasData(
                        new
                        {
                            StandardId = 1,
                            StandardCapacity = "30 students",
                            StandardName = "Standard 1"
                        },
                        new
                        {
                            StandardId = 2,
                            StandardCapacity = "35 students",
                            StandardName = "Standard 2"
                        },
                        new
                        {
                            StandardId = 3,
                            StandardCapacity = "35 students",
                            StandardName = "Standard 2"
                        });
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<int?>("AdmissionNo")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("EnrollmentNo")
                        .HasColumnType("int");

                    b.Property<string>("FatherContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherNID")
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalGuardianContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalGuardianName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherNID")
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<string>("MotherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermanentAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StandardId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("StudentBloodGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentContactNumber1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentContactNumber2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StudentDOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("StudentEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentGender")
                        .HasColumnType("int");

                    b.Property<string>("StudentNIDNumber")
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<string>("StudentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentNationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentReligion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemporaryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UniqueStudentAttendanceNumber")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.HasIndex("AdmissionNo")
                        .IsUnique();

                    b.HasIndex("EnrollmentNo")
                        .IsUnique();

                    b.HasIndex("StandardId");

                    b.HasIndex("UniqueStudentAttendanceNumber")
                        .IsUnique();

                    b.ToTable("Student");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            AdmissionNo = 1000,
                            EnrollmentNo = 2000,
                            FatherContactNumber = "9876543210",
                            FatherNID = "17948678987624322",
                            FatherName = "Michael Doe",
                            LocalGuardianContactNumber = "9876543230",
                            LocalGuardianName = "Jane Smith",
                            MotherContactNumber = "9876543220",
                            MotherNID = "17948678987754322",
                            MotherName = "Alice Doe",
                            PermanentAddress = "123 Main Street, City, Country",
                            StandardId = 1,
                            StudentBloodGroup = "A+",
                            StudentContactNumber1 = "1234567890",
                            StudentDOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentEmail = "john.doe@example.com",
                            StudentGender = 0,
                            StudentNIDNumber = "17948678987654320",
                            StudentName = "John Doe",
                            StudentNationality = "American",
                            TemporaryAddress = "456 Elm Street, City, Country",
                            UniqueStudentAttendanceNumber = 1000
                        },
                        new
                        {
                            StudentId = 2,
                            AdmissionNo = 1001,
                            EnrollmentNo = 2001,
                            FatherContactNumber = "9876543210",
                            FatherNID = "17948578987654322",
                            FatherName = "Michael Doe",
                            LocalGuardianContactNumber = "9876543230",
                            LocalGuardianName = "Jane Smith",
                            MotherContactNumber = "9876543220",
                            MotherNID = "17948674987654322",
                            MotherName = "Alice Doe",
                            PermanentAddress = "123 Main Street, City, Country",
                            StandardId = 2,
                            StudentBloodGroup = "A+",
                            StudentContactNumber1 = "1234567890",
                            StudentDOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentEmail = "john.doe@example.com",
                            StudentGender = 0,
                            StudentNIDNumber = "17948678987654322",
                            StudentName = "John Doe",
                            StudentNationality = "American",
                            TemporaryAddress = "456 Elm Street, City, Country",
                            UniqueStudentAttendanceNumber = 1001
                        },
                        new
                        {
                            StudentId = 3,
                            AdmissionNo = 1002,
                            EnrollmentNo = 2002,
                            FatherContactNumber = "9876543210",
                            FatherNID = "17345678987654322",
                            FatherName = "Michael Doe",
                            LocalGuardianContactNumber = "9876543230",
                            LocalGuardianName = "Jane Smith",
                            MotherContactNumber = "9876543220",
                            MotherNID = "12345678987654322",
                            MotherName = "Alice Doe",
                            PermanentAddress = "123 Main Street, City, Country",
                            StandardId = 3,
                            StudentBloodGroup = "A+",
                            StudentContactNumber1 = "1234567890",
                            StudentDOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StudentEmail = "john.doe@example.com",
                            StudentGender = 0,
                            StudentNIDNumber = "17945678987654322",
                            StudentName = "John Doe",
                            StudentNationality = "American",
                            TemporaryAddress = "456 Elm Street, City, Country",
                            UniqueStudentAttendanceNumber = 1002
                        });
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"));

                    b.Property<int?>("StandardId")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectCode")
                        .HasColumnType("int");

                    b.Property<string>("SubjectName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubjectId");

                    b.HasIndex("StandardId");

                    b.HasIndex("SubjectCode")
                        .IsUnique()
                        .HasFilter("[SubjectCode] IS NOT NULL");

                    b.ToTable("Subject");

                    b.HasData(
                        new
                        {
                            SubjectId = 1,
                            StandardId = 1,
                            SubjectCode = 101,
                            SubjectName = "Mathematics"
                        },
                        new
                        {
                            SubjectId = 2,
                            StandardId = 2,
                            SubjectCode = 102,
                            SubjectName = "Physics"
                        },
                        new
                        {
                            SubjectId = 3,
                            StandardId = 3,
                            SubjectCode = 103,
                            SubjectName = "Chemistry"
                        },
                        new
                        {
                            SubjectId = 4,
                            StandardId = 1,
                            SubjectCode = 104,
                            SubjectName = "Biology"
                        },
                        new
                        {
                            SubjectId = 5,
                            StandardId = 2,
                            SubjectCode = 105,
                            SubjectName = "Computer Science"
                        },
                        new
                        {
                            SubjectId = 6,
                            StandardId = 3,
                            SubjectCode = 106,
                            SubjectName = "Electronics"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.SecurityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.SecurityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Models.DataModels.SecurityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.SecurityModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.AcademicMonth", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.MonthlyPayment", "monthlyPayment")
                        .WithMany("academicMonths")
                        .HasForeignKey("MonthlyPaymentId");

                    b.Navigation("monthlyPayment");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.DueBalance", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.MonthlyPayment", null)
                        .WithMany("dueBalances")
                        .HasForeignKey("MonthlyPaymentId");

                    b.HasOne("SchoolApp.Models.DataModels.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.ExamScheduleStandard", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.ExamSchedule", "ExamSchedule")
                        .WithMany("ExamScheduleStandards")
                        .HasForeignKey("ExamScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Models.DataModels.Standard", "Standard")
                        .WithMany("ExamScheduleStandards")
                        .HasForeignKey("StandardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamSchedule");

                    b.Navigation("Standard");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.ExamSubject", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.ExamScheduleStandard", "ExamScheduleStandard")
                        .WithMany("ExamSubjects")
                        .HasForeignKey("ExamScheduleStandardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Models.DataModels.ExamType", "ExamType")
                        .WithMany("ExamSubjects")
                        .HasForeignKey("ExamTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Models.DataModels.Subject", "Subject")
                        .WithMany("ExamSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamScheduleStandard");

                    b.Navigation("ExamType");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Fee", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.FeeType", "feeType")
                        .WithMany()
                        .HasForeignKey("FeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Models.DataModels.MonthlyPayment", "monthlyPayment")
                        .WithMany("fees")
                        .HasForeignKey("MonthlyPaymentId");

                    b.HasOne("SchoolApp.Models.DataModels.OthersPayment", "othersPayment")
                        .WithMany("fees")
                        .HasForeignKey("OthersPaymentId");

                    b.HasOne("SchoolApp.Models.DataModels.Standard", "standard")
                        .WithMany()
                        .HasForeignKey("StandardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("feeType");

                    b.Navigation("monthlyPayment");

                    b.Navigation("othersPayment");

                    b.Navigation("standard");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Mark", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Models.DataModels.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Models.DataModels.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Staff");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.MonthlyPayment", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.OtherPaymentDetail", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.OthersPayment", null)
                        .WithMany("otherPaymentDetails")
                        .HasForeignKey("OthersPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.OthersPayment", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.PaymentDetail", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.MonthlyPayment", null)
                        .WithMany("PaymentDetails")
                        .HasForeignKey("MonthlyPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.PaymentMonth", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.MonthlyPayment", null)
                        .WithMany("paymentMonths")
                        .HasForeignKey("MonthlyPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Staff", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("SchoolApp.Models.DataModels.StaffSalary", "StaffSalary")
                        .WithMany()
                        .HasForeignKey("StaffSalaryId");

                    b.Navigation("Department");

                    b.Navigation("StaffSalary");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.StaffExperience", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.Staff", null)
                        .WithMany("StaffExperiences")
                        .HasForeignKey("StaffId");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Student", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.Standard", "Standard")
                        .WithMany()
                        .HasForeignKey("StandardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Standard");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Subject", b =>
                {
                    b.HasOne("SchoolApp.Models.DataModels.Standard", "Standard")
                        .WithMany("Subjects")
                        .HasForeignKey("StandardId");

                    b.Navigation("Standard");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.ExamSchedule", b =>
                {
                    b.Navigation("ExamScheduleStandards");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.ExamScheduleStandard", b =>
                {
                    b.Navigation("ExamSubjects");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.ExamType", b =>
                {
                    b.Navigation("ExamSubjects");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.MonthlyPayment", b =>
                {
                    b.Navigation("PaymentDetails");

                    b.Navigation("academicMonths");

                    b.Navigation("dueBalances");

                    b.Navigation("fees");

                    b.Navigation("paymentMonths");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.OthersPayment", b =>
                {
                    b.Navigation("fees");

                    b.Navigation("otherPaymentDetails");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Staff", b =>
                {
                    b.Navigation("StaffExperiences");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Standard", b =>
                {
                    b.Navigation("ExamScheduleStandards");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("SchoolApp.Models.DataModels.Subject", b =>
                {
                    b.Navigation("ExamSubjects");
                });
#pragma warning restore 612, 618
        }
    }
}
